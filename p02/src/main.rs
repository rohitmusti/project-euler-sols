/*
 * Prompt:
 * Each new term in the Fibonacci sequence is generated by adding the previous two
 * terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed 
 * four million, find the sum of the even-valued terms.
 *
 * Solution:
 * Generate the fibonnaci sequence up until a number and append the even numbers 
 * to an array and sum the array. This runs in linear time O(N) if N is the target.
 */

fn main() {
    let target: u32 = 4_000_000;
    let sol: u32 = even_fib_under_lim(target).iter().sum();
    println!(
        "The sum of all even fibonacci numbers under {} is: {}",
        target, sol
    );
}

pub fn even_fib_under_lim(limit: u32) -> Vec<u32> {
    let mut prev: u32 = 1;
    let mut current: u32 = 2;
    let mut temp;

    let mut sol: Vec<u32> = Vec::new();

    while current < limit {
        if current % 2 == 0 {
            sol.push(current);
        }
        temp = current;
        current += prev;
        prev = temp
    }
    sol
}

#[cfg(test)]
mod tests {
    #[test]
    fn ten_test() {
        use crate::even_fib_under_lim;
        let sol: Vec<u32> = vec![2, 8];
        assert_eq!(even_fib_under_lim(10), sol);
    }

    #[test]
    fn forty_test() {
        use crate::even_fib_under_lim;
        let sol: Vec<u32> = vec![2, 8, 34];
        assert_eq!(even_fib_under_lim(40), sol);
    }
}
